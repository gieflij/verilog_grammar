`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    17:10:30 03/14/2020 
// Design Name: 
// Module Name:    sig_control 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////

//행위 수준의 verilog 구조를 가지고 신호등 신호 제어기 모듈 설계
//우선순위 : 주요도로의 신호등이 가장 높음, 주요도로의 신호는 기본적으로 녹색
//간선도로에 차가 있으면 X=1, 없으면 X=0
//간선도로에 차가 없으면 간선도로의 신호등은 노란색에서 빨간색으로 바뀌고, 주요도로의 신호등은 다시 녹색으로 바뀐다

`define TRUE 1'b1;
`define FALSE 1'b0

//지연
`define Y2RDELAY 3 //노란색에서 빨간색으로 변하는 지연
`define R2GDELAY 2 //빨간색에서 녹색으로 변하는 지연

module sig_control(hwy, cntry, X, clock, clear);

output [1:0] hwy, cntry; // 녹색, 노란색, 빨간색 3가지 신호를 위한 2비트 출력
reg [1:0] hwy, cntry;
input X; // X=1이면 간선도로에 차가 있음
input clock, clear;

parameter RED = 2'd0, YELLOW = 2'd1, GREEN = 2'd2;

parameter S0 = 3'd0,
			 S1 = 3'd1,
			 S2 = 3'd2,
			 S3 = 3'd3,
			 S4 = 3'd4;
			 
reg [2:0] state;
reg [2:0] next_state;

always @(posedge clock)
	if (clear)
		state <= S0;
	else
		state <= next_state;

//주요도로와 간선도로의 신호의 값 계산
always @(state)
begin
	hwy = GREEN; //주요도로 기본 값 할당
	cntry = RED; //간선도로 기본 값 할당
	case(state)
		S0 : ; //기본값 사용, 변화없음
		S1 : hwy = YELLOW;
		S2 : hwy = RED;
		S3 : begin
				hwy = RED;
				cntry = GREEN;
				end
		S4 : begin
				hwy = RED;
				cntry = YELLOW;
				end
	endcase
end

//case 문장을 사용한 상태기
always @(state or X)
begin
	case(state)
		S0 : if(X)
				next_state = S1;
			  else
				next_state = S0;
		S1 : begin
				repeat(`Y2RDELAY) @(posedge clock);
				next_state = S2;
			  end
		S2 : begin
				repeat (`R2GDELAY) @(posedge clock);
				next_state = S3;
			  end
		S3 : if(X)
				next_state = S3;
			  else
				next_state = S4;
		S4 : begin
				repeat (`Y2RDELAY) @(posedge clock);
				next_state = S0;
			  end
		default : next_state = S0;
	endcase
end

endmodule

module stimulus;

wire [1:0] MAIN_SIG, CNTRY_SIG;
reg CAR_ON_CNTRY_RD; // 참이면 간선도로에 차가 있다
reg CLOCK, CLEAR;

//신호 제어기 파생
sig_control SC(MAIN_SIG, CNTRY_SIG, CAR_ON_CNTRY_RD, CLOCK, CLEAR);

//모니터 구성
initial
	$monitor($time, " Main Sig = %b Country Sig = %b Car_on_cntry = %d", MAIN_SIG, CNTRY_SIG, CAR_ON_CNTRY_RD);
	
//클럭 구성
initial
begin
	CLOCK = `FALSE;
	forever #5 CLOCK = ~CLOCK;
end

//clear 신호 제어
initial
begin
	CLEAR = `TRUE;
	repeat (5) @(negedge CLOCK);
	CLEAR = `FALSE;
end

//스티뮬러스 적용
initial
begin
	CAR_ON_CNTRY_RD = `FALSE;
	
	repeat(20) @(negedge CLOCK); CAR_ON_CNTRY_RD = `TRUE;
	repeat(10) @(negedge CLOCK); CAR_ON_CNTRY_RD = `FALSE;
	
	repeat(20) @(negedge CLOCK); CAR_ON_CNTRY_RD = `TRUE;
	repeat(10) @(negedge CLOCK); CAR_ON_CNTRY_RD = `FALSE;
	
	repeat(20) @(negedge CLOCK); CAR_ON_CNTRY_RD = `TRUE;
	repeat(10) @(negedge CLOCK); CAR_ON_CNTRY_RD = `FALSE;
	
	repeat(10) @(negedge CLOCK); $stop;
end

endmodule