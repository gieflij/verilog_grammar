//<지연 기반 타이밍 제어>
//#1 regualr delay control(정규 지연 제어)
parameter latency = 20;
parameter delta = 2;

reg x, y, z, p, q;

initial
begin
	x = 0;
	#10 y = 1; //숫자를 가지고 지연 제어
	#latency z = 0; //식별자를 가지고 지연제어
	#(latency + delta) p =1; //수식을 가지고 지연제어
	
	#y x = x+1; //식별자를 가지고 지연 제어
	
	#(4:5:6) q = 0; //최소, 전형, 최대 지연값
end

//#2 intra-assignment delay control(내부 할당 지연 제어)
//할당 연산자의 오른쪽에 지연을 할당
reg x, y, z;

initial
begin
	x =0; z =0;
	y = #5 x+z; //x+z를 계산한 뒤 5ns 시간을 기다린 후 할당
end

//임시 변수와 정규 지연 제어를 이용하여 내부 할당 지연 제어와 같은 효과
initial
begin
	x=0; z=0;
	temp_xz = x+z;
	#5 y = temp_xz;
	// x+z의 값을 임시변수에 저장한다. 5ns 전에 x와 z 값이 변한다고 해도 5ns에 y에 할당되는 값은 변하지 않음
end


//#3 제로 지연 제어
initial
begin
	x = 0;
	y = 0;
end

//x=1과 y=1은 #0을 가져서 마지막에 수행
//0ns 끝에서는 x=1, y=1을 가짐. 수행되는 순서는 무작위적.
//#0을 사용하는 것은 추천하지 않음
initial
begin
	#0 x = 1;
	#0 y = 1;
end

//<사건 기반 타이밍 제어>
//#1 regular event control
@(clock) q = d;
@(posedge clock) q = d;
@(negedge clock) q = d;
a = @(posedge clock) d; //상승에지에서 현재 d의 값을 구하고 q로 할당

//#2 named event control
event received_data; //사건 정의

always @(posedge clock)
begin
	if(last_data_packet)
		->received_data; // if의 조건문을 만족하면 사건 received_data 구동
end

//recevied_data가 구동되면 받은 데이터의 모든 패킷을 데이터 버퍼에 저장
always @(received_data)
	data_buf = {data_pkt[0], data_pkt[1], data_pkt[2], data_pkt[3]};
	

//#3 event OR control
always @(reset or clock or d)
begin
	if(reset)
		q = 1'b0;
	else if(clock)
		q = d;
end

//using "," instead of "OR"
always @(reset, clock, d)
begin
	if(reset)
		q = 1'b0;
	else if(clock)
		q = d;
end

always @(posedge clk, negedge reset)
if(!reset)
	q<=0;
else
	q<=d;
	
//OR연산자 사용하면
always @(a or b or c or d or e or f or g or h or p or m)
begin
	out1 = a ? b+c : d+3;
	out2 = f ? g+h : p+m;
end

//OR 대신 @* 또는 @(*) 이용
always @(*)
begin
	out1 = a ? b+c : d+e;
	out2 = f ? g+h : p+m;
end


//#4 level-sensitive timing control
//count_enable이 1이면 20ns 후에 count 값 증가
//count_enable이 계속 1을 유지하면 매 20ns 후에 count 값 증가
always
	wait(count_enable) #20 count = count+1;

